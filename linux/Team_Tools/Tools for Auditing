6 - Linux Auditing
tiger - http://manpages.ubuntu.com/manpages/precise/man8/tiger.8.html

systemd
# man systemd-system.conf
/etc/systemd/system.conf # commented out stuff..
/etc/systemd/user.conf # commented out stuff..
/etc/systemd/system/
/etc/systemd/user/

# services
systemctl # lists active by default, vs chkconfig??
systemctl [service, start, stop, enable, disable] program.service
services: cronie

SysVinit (also LSB)
### need to go over again ### 
/etc/inittab # systemd alternative??
/etc/rc.d/rc*.d/ # S prefix = startup, K prefix = kill, /etc/rc*.d linked to /etc/rc.d/rc*.d

cron
for user in $(cut -f1 -d: /etc/passwd); do crontab -u $user -l; done
	# document this stuff

started via..
/etc/rc.d/??? ‚Üê this is not for systemd ??
/etc/init.d
/etc/anacron # also searched by cron

checked by cron
/etc/crontab
/etc/cron.d
/var/spool/cron/

other directories
/etc/cron  "daily"  "hourly"   "monthly"   "weekly" 

other files
/etc/cron.deny   /etc/cron.allow

logging
/var/log/cron

anacron
/etc/anacron
/etc/anacrontab # list of cron jobs

at, atd

bash shell
invoked as login # --noprofile will ignore all startup files

/etc/profile
/etc/bash_logout
/etc/bash.bashrc

~/.bash_profile # login
~/.bashrc # every instance
~/.bash_login
~/.profile

alias

X11
/etc/X11/xinit/ # pulls from xinitrc.d/*
		xinitrc
		xinitrc.d/*    30-dbus   40-libcanberra-gtk-module
		xserverrc

~/.xinitrc # [++] exec [blah]
~/.xorg.conf.new 
~/.Xauthority
~/.Xresources

services
netstat -putan
ps -ef
fuser ??
w
last

PAM, wheel, passwd, shadow, etc. - TODO
/etc/passwd
user:passwd:uid:gid:info:directory:shell 
# if passwd isn't x, no password needed to login
which programs actually need shells??

/etc/groups

/etc/sudoer
id [user]
usermod -a -G root berry # add
usermod -G [valid groups] berry # will remove from root group

binaries/modules
trojaned modules
lsmod
modinfo [module]
dmesg # use to identify driver

find /lib/modules/*/ -type f -iname '*.ko' | less
- seems most modules aren't signed, no easy way to ID them...
TODO - how would you effectively find the source to recompile it?

trojaned binaries
- find / -perm +6000 -ls  # -type f, 
- strings for IPs and other oddities
- seems most binaries aren't signed, no easy way to ID them unless wrapper scripts...
TODO - how would you effectively find the source to recompile it?

trojaned linker
env | grep LD

